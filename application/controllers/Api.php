<?php
defined('BASEPATH') OR exit('No direct script access allowed');

use MetzWeb\Instagram\Instagram;
use Abraham\TwitterOAuth\TwitterOAuth;
require_once APPPATH.'libraries/LinkedIn/autoload.php';
use LinkedIn\LinkedIn;

class Api extends CI_Controller {
  public function __construct(){
    parent::__construct();
  }

  private function check_session(){
    return ($this->session->is_logged) ? TRUE:FALSE;
  }

  public function index() {
    if(!$this->check_session()) {
      redirect(SITEURL);
    }
    print("Invalid call");
  }

  public function get_analytics() {
    $camp_id = $this->input->post('camp_id');
    $brand_id = $this->db->select('camp_by')->from('campaigns')->where('camp_id', $camp_id)->get()->result_array();
    $brand_id = $brand_id[0]['camp_by'];

    $final_data = [];
    $fetch = ['fb', 'ins', 'tw', 'yt'];

    foreach ($fetch as $key => $category) {
      $table = 'webassets_'.$category.'_analytics_'.$brand_id;
      $q = $this->db->query("SELECT count(*) FROM information_schema.TABLES WHERE (TABLE_SCHEMA = '".DB_DATABASE."') AND (TABLE_NAME = '".$table."')")->result_array();

      if($q[0]['count(*)']) {
        $data = $this->db->select('*')->from($table)->where('camp_id', $camp_id)->get()->result_array();

        foreach ($data as $key => $value) {
          $value['data'] = json_decode($value['data'], true);
          $data[$key] = $value;
        }

        foreach ($data as $key => $value) {
          if(isset($data[$key+1])) {
            foreach ($value['data'] as $key1 => $value1) {
              $value1 = $value1-$data[$key+1]['data'][$key1];
              $value['data'][$key1] = $value1;
            }
            $data[$key] = $value;
          }
        }

        $final_data[$category] = $data;
      }
    }
    header('Content-type: application/json');
    print_r(json_encode($final_data));
  }

  public function facebook_post($post_id, $token_id, $inf_id) {
    /*post_impressions	The number of impressions for your Page post.
    post_impressions_unique	The number of people who saw your Page post.
    post_impressions_paid	The number of impressions for your Page post in an Ad or Sponsored Story.
    post_impressions_paid_unique	The number of people who saw your Page post in an Ad or Sponsored Story.
    post_impressions_fan	The number of impressions for your Page post by people who have liked your Page.
    post_impressions_fan_unique	The number of people who have like your Page who saw your Page post.
    post_impressions_fan_paid	The number of impressions for your Page post by people who like your Page in an Ad or Sponsored Story.
    post_impressions_fan_paid_unique	The number of people who have like your Page and saw your Page post in an Ad or Sponsored Story.
    post_impressions_organic	The number of impressions of your post in Newsfeed, Ticker, or on your Page's Timeline.
    post_impressions_organic_unique	The number of people who saw your post in their Newsfeed or Ticker or on your Page's Timeline.
    post_impressions_viral	The number of impressions of your Page post in a story generated by a friend.
    post_impressions_viral_unique	The number of people who saw your page post in a story from a friend.
    post_consumptions	The number of times people clicked on anywhere in your posts without generating a story.
    post_consumptions_unique	The number of people who clicked anywhere in your post without generating a story.
    post_engaged_users	The number of people who clicked anywhere in your posts.
    post_negative_feedback	The number of times people took a negative action in your post (e.g. hid it).
    post_negative_feedback_unique	The number of people who took a negative action in your post (e.g., hid it).
    post_engaged_fan	People who have liked your page and engaged with your post.
    post_fan_reach	Post reach by people who like your page.
    post_reactions_like_total	Total "like" reactions of a post.
    post_reactions_love_total	Total "love" reactions of a post.
    post_reactions_wow_total	Total "wow" reactions of a post.
    post_reactions_haha_total	Total "haha" reactions of a post.
    post_reactions_sorry_total	Total "sorry" reactions of a post.
    post_reactions_anger_total	Total "anger" reactions of a post.*/
    $fetch = [
      'post_impressions', 'post_impressions_unique', 'post_impressions_paid', 'post_impressions_paid_unique',
      'post_impressions_fan', 'post_impressions_fan_unique', 'post_impressions_fan_paid', 'post_impressions_fan_paid_unique',
      'post_impressions_organic', 'post_impressions_organic_unique',
      'post_impressions_viral', 'post_impressions_viral_unique',
      'post_consumptions', 'post_consumptions_unique',
      'post_engaged_users',
      'post_negative_feedback', 'post_negative_feedback_unique',
      'post_engaged_fan', 'post_fan_reach',
      'post_reactions_like_total', 'post_reactions_love_total', 'post_reactions_wow_total', 'post_reactions_haha_total', 'post_reactions_sorry_total', 'post_reactions_anger_total'
    ];

    $data_return = [];

    $inf_data = $this->db->select('*')->from('tokens')->where(['id' => $token_id])->get()->result_array();
    $inf_data = $inf_data[0];
    $tokenId = $inf_data['id'];

    $fb = new Facebook\Facebook([
      'app_id' => FB_APP_ID,
      'app_secret' => FB_APP_SECRET,
      'default_graph_version' => FB_API_VERSION,
      'default_access_token' => FB_ACCESS_TOKEN
    ]);
    $fbApp = new Facebook\FacebookApp(FB_APP_ID, FB_APP_SECRET);

    $token = json_decode($inf_data['cat_token'], true);
    $page_access_token = $token['access_token'];

    $request = new Facebook\FacebookRequest($fbApp, $page_access_token, 'GET', '/'.$inf_data['cat_id'], ['fields' => 'fan_count']);
    $response = $fb->getClient()->sendRequest($request);
    $likes = $response->getDecodedBody();
    if(isset($likes['fan_count'])) {
      $this->db->where(['id' => $tokenId]);
      $this->db->update('tokens', ['followers' => $likes['fan_count']]);
    }

    $page_id = $likes['id'];
    $page_post_id = $post_id;

    $metrics = "";
    foreach ($fetch as $key => $value) {
      $metrics = $metrics.$value.',';
    }
    $metrics = rtrim($metrics, ',');

    $request = new Facebook\FacebookRequest($fbApp, $page_access_token, 'GET', '/'.$page_post_id.'/insights/'.$metrics);
    $response = $fb->getClient()->sendRequest($request);
    $body = $response->getDecodedBody();
    $body = $body['data'];

    foreach ($body as $key => $value) {
      $data_return[$value['name']] = $value['values'][0]['value'];
    }

    $request = new Facebook\FacebookRequest($fbApp, $page_access_token, 'GET', '/'.$page_post_id.'/comments?summary=true');
    $response = $fb->getClient()->sendRequest($request);
    $body = $response->getDecodedBody();
    $body = $body['summary'];
    $data_return['comments'] = $body['total_count'];

    $request = new Facebook\FacebookRequest($fbApp, $page_access_token, 'GET', '/'.$page_post_id.'?fields=shares');
    $response = $fb->getClient()->sendRequest($request);
    $body = $response->getDecodedBody();
    if(isset($body['shares'])) {
      $data_return['shares'] = $body['shares']['count'];
    }
    else {
      $data_return['shares'] = 0;
    }

    return $data_return;
  }

  public function instagram_post($post_id, $inf_id) {
    /*like_count 	Total likes on the post
    comments_count 	Total comments on the post
    engagement 	Total number of likes and comments on the media object
    impressions	Total number of times the media object has been seen
    reach	Total number of unique accounts that have seen the media object
    saved	Total number of unique accounts that have saved the media object*/

    $fetch = [
      'fields' => array('like_count', 'comments_count'),
      'insights' => array('engagement', 'impressions', 'reach', 'saved')
    ];

    $data_return = [];
    $inf_data = $this->db->select('*')->from('tokens')->where(['inf_id' => $inf_id, 'category' => 'ins'])->get()->result_array();
    $inf_data = $inf_data[0];
    $tokenId = $inf_data['id'];

    $fb = new Facebook\Facebook([
      'app_id' => FB_APP_ID,
      'app_secret' => FB_APP_SECRET,
      'default_graph_version' => FB_API_VERSION,
      'default_access_token' => FB_ACCESS_TOKEN
    ]);
    $fbApp = new Facebook\FacebookApp(FB_APP_ID, FB_APP_SECRET);

    $token = json_decode($inf_data['cat_token'], true);
    $page_access_token = $token['access_token'];
    $account_id = $token['id'];

    $request = new Facebook\FacebookRequest($fbApp, $page_access_token, 'GET', '/'.$account_id, ['fields' => 'followers_count']);
    $response = $fb->getClient()->sendRequest($request);
    $body = $response->getDecodedBody();
    if(isset($body['followers_count'])) {
      $this->db->where(['id' => $tokenId]);
      $this->db->update('tokens', ['followers' => $body['followers_count']]);
    }

    foreach ($fetch as $key => $value) {
      $req = "";
      foreach ($value as $key1 => $value1) {
        $req = $req.$value1.',';
      }
      $req = rtrim($req, ',');

      if($key == 'fields') {
        $request = new Facebook\FacebookRequest($fbApp, $page_access_token, 'GET', '/'.$post_id, ['fields' => $req]);
        $response = $fb->getClient()->sendRequest($request);
        $body = $response->getDecodedBody();
        foreach ($body as $key => $value) {
          if($key != 'id')
          $data_return[$key] = $value;
        }
      }
      else if($key == 'insights') {
        $request = new Facebook\FacebookRequest($fbApp, $page_access_token, 'GET', '/'.$post_id.'/insights', ['metric' => $req]);
        $response = $fb->getClient()->sendRequest($request);
        $body = $response->getDecodedBody();
        $body = $body['data'];
        foreach ($body as $key => $value) {
          $data_return[$value['name']] = $value['values'][0]['value'];
        }
      }
    }
    return $data_return;
  }

  public function twitter_post($post_id, $inf_id) {
    /*favorites	A count of how many times the Tweet has been favorited.
    replies	A count of how many times the Tweet has been replied to.
    retweets	A count of how many times the Tweet has been Retweeted.*/
    /*$data_return['favorites'] = rand(0, 100);
    $data_return['retweets'] = rand(57, 100);
    $data_return['replies'] = rand(40, 100);
    return $data_return;*/

    $inf_data = $this->db->select('*')->from('tokens')->where(['inf_id' => $inf_id, 'category' => 'tw'])->get()->result_array();
    $inf_data = $inf_data[0];
    $tokenId = $inf_data['id'];

    $token = json_decode($inf_data['cat_token'], true);

    $access_token = $token['access_token'];
    $access_token_secret = $token['access_token_secret'];

    $connection = new TwitterOAuth(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, $access_token, $access_token_secret);
    $content = $connection->get("account/verify_credentials");
    $followers = $content->followers_count ? $content->followers_count:0;
    if($followers) {
      $this->db->where(['id' => $tokenId]);
      $this->db->update('tokens', ['followers' => $followers]);
    }

    $statuses = $connection->get("statuses/show", ['id' => $post_id, 'include_entities' => '1', 'trim_user' => '1']);
    $statuses = json_decode(json_encode($statuses), true);

    $data_return = [];
    $data_return['favorites'] = 0;
    $data_return['retweets'] = 0;
    $data_return['replies'] = 0;

    if(isset($statuses['favorite_count']))
    $data_return['favorites'] = $statuses['favorite_count'];
    if(isset($statuses['retweet_count']))
    $data_return['retweets'] = $statuses['retweet_count'];
    if(isset($statuses['reply_count']))
    $data_return['replies'] = $statuses['reply_count'];

    return $data_return;
  }

  public function youtube_post($post_id, $inf_id) {
    /*averageViewDuration	The average length, in seconds, of video playbacks.
    comments	The number of times that users commented on a video.
    dislikes	The number of times that users indicated that they disliked a video by giving it a negative rating.
    estimatedMinutesWatched	The number of minutes that users watched videos for the specified channel, content owner, video, or playlist. 
    likes	The number of times that users indicated that they liked a video by giving it a positive rating.
    shares	The number of times that users shared a video through the Share button.
    views	The number of times that a video was viewed.*/
    $fetch = [
      'averageViewDuration',
      'comments',
      'dislikes',
      'estimatedMinutesWatched',
      'likes',
      'shares',
      'views'
    ];
    $data_return = [];

    $inf_data = $this->db->select('*')->from('tokens')->where(['inf_id' => $inf_id, 'category' => 'yt'])->get()->result_array();
    $inf_data = $inf_data[0];
    $tokenId = $inf_data['id'];
    $token = json_decode($inf_data['cat_token'], true);

    $client = new Google_Client();
    $client->setApplicationName('WebAssets');
    $client->setScopes('https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/yt-analytics.readonly');
    $client->setAuthConfig(APPPATH.'config/google_client_secret.json');
    $client->setAccessType('offline');
    $client->setApprovalPrompt('force');
    $client->setRedirectUri(SITEURL.'influencer/reporting_google_callback');
    $guzzleClient = new \GuzzleHttp\Client(array( 'curl' => array( CURLOPT_SSL_VERIFYPEER => false, ), ));
    $client->setHttpClient($guzzleClient);

    $client->setAccessToken($token);
    if ($client->isAccessTokenExpired()) {
      $client->fetchAccessTokenWithRefreshToken($client->getRefreshToken());
    }

    $service = new Google_Service_YouTube($client);
    $part = 'snippet,contentDetails,statistics';
    $params = array('mine' => true);
    $params = array_filter($params);
    $response = $service->channels->listChannels($part, $params);
    $channels = $response->getItems();
    $subscribers = 0;
    foreach ($channels as $key => $value) {
      if($value['id'] == $inf_data['cat_id']) {
        $subscribers = $value['statistics']['subscriberCount'];
        break;
      }
    }
    if($subscribers) {
      $this->db->where(['id' => $tokenId]);
      $this->db->update('tokens', ['followers' => $subscribers]);
    }

    $metrics = "";
    foreach ($fetch as $key => $value) {
      $metrics = $metrics.$value.',';
    }
    $metrics = rtrim($metrics, ',');

    $service = new Google_Service_YouTubeAnalytics($client);
    $response = $service->reports->query('channel=='.$inf_data['cat_id'], date("Y-m-d",strtotime('2010-01-01')), date("Y-m-d"), $metrics, ['filters' => 'video=='.$post_id]);
    $modelData = $response['modelData']['columnHeaders'];
    $rows = $response['rows'][0];

    foreach ($modelData as $key => $value) {
      if(isset($rows[$key])) {
        $data_return[$value['name']] = $rows[$key];
      }
      else {
        $data_return[$value['name']] = 0;
      }
    }

    return $data_return;
  }

  public function clickmeter_post($camp_data) {
    $clicks = 0;
    $cm_id = $camp_data['cm_id'];
    $cm_id = explode('_', $cm_id);
    $cm_id = $cm_id[1];
    $cm = json_decode($this->clickmeter_report_datapoint($cm_id), true);
    if(isset($cm['createdAt'])) {
      $clicks = $cm['data'][0]['totalHits'];
    }
    $cm = $this->click_city_country($cm_id);
    $cm = $cm['rows'];
    $cm_data = [];
    $cm_country = [];

    foreach ($cm as $key => $value) {
      if(isset($value['location']['region'])) {
        $region = $value['location']['region'];
      }
      else {
        $region = $value['location']['city'];
      }
      if($region == '')
      $region = 'Unknown';

      $cm_country[$region] = $value['location']['country'];
      if($region != '') {
        if(isset($cm_data[$region])) {
          $cm_data[$region]++;
        }
        else {
          $cm_data[$region] = 1;
        }
      }
    }
    $cm_data_db = [];
    $table = 'webassets_clicks_'.$camp_data['camp_id'];
    $this->db->query('CREATE TABLE IF NOT EXISTS `'.$table.'` ( `id` INT NOT NULL AUTO_INCREMENT , `country` VARCHAR(255) NOT NULL , `region` VARCHAR(255) NOT NULL , `clicks` INT NOT NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;');
    foreach ($cm_data as $key => $value) {
      $cm_data_db['country'] = $cm_country[$key];
      $cm_data_db['region'] = $key;
      $cm_data_db['clicks'] = $value;

      $check = $this->db->select('clicks')->from($table)->where('region', $key)->get()->result_array();
      if($check == Array()) {
        $this->db->insert($table, $cm_data_db);
      }
      else {
        $this->db->where('region', $key);
        $this->db->update($table, $cm_data_db);
      }
    }
    return $clicks;
  }

  public function call_analytics() {
    $camp_id = $this->input->post('camp_id');
    $inf_id = $this->input->post('inf_id');
    $analytics_id = $this->input->post('analytics_id');
    $token_id = $this->input->post('token_id');

    $camp_data = $this->db->select('*')->from('campaigns')->where('camp_id', $camp_id)->get()->result_array();
    if(sizeof($camp_data) == 0){
      print("camp_data size zero");
      exit();
    }
    $camp_data = $camp_data[0];

    if($camp_data['camp_category'] == 'Facebook') {
      $camp_data_new = $this->db->select('*')->from('camp_data')->where(['camp_id' => $camp_id, 'inf_id' => $inf_id, 'token_id' => $token_id])->get()->result_array();
    }
    else {
      $camp_data_new = $this->db->select('*')->from('camp_data')->where(['camp_id' => $camp_id, 'inf_id' => $inf_id])->get()->result_array();
    }
    if(sizeof($camp_data_new) == 0){
      print("camp_data_new size zero");
      exit();
    }
    $camp_data_new = $camp_data_new[0];

    $inf_data = $this->db->select('*')->from('influencers')->where('id', $inf_id)->get()->result_array();
    if(sizeof($inf_data) == 0){
      print("inf_data size zero");
      exit();
    }
    $inf_data = $inf_data[0];

    $post_id = $camp_data_new['post_id'];
    $inf_id = $inf_data['id'];
    $brand_id = $camp_data['camp_by'];
    $camp_data_id = $camp_data_new['id'];

    $data = [];
    $current_count = 0.0;
    if($camp_data['camp_category'] == 'Facebook') {
      $data = $this->facebook_post($post_id, $token_id, $inf_id);
      $cat = 'fb';
      if($camp_data['camp_type'] == 'Likes') {
        $current_count = $data['post_reactions_like_total'];
      }
      else if($camp_data['camp_type'] == 'Reach') {
        $current_count = $data['post_fan_reach'];
      }
      else if($camp_data['camp_type'] == 'Engagement') {
        $current_count = $data['post_engaged_users'];
      }
      else if($camp_data['camp_type'] == 'Click') {
        $current_count = $this->clickmeter_post($camp_data);
      }
    }
    else if($camp_data['camp_category'] == 'Instagram') {
      $data = $this->instagram_post($post_id, $inf_id);
      $cat = 'ins';
      if($camp_data['camp_type'] == 'Likes') {
        $current_count = $data['like_count'];
      }
      else if($camp_data['camp_type'] == 'Reach') {
        $current_count = $data['reach'];
      }
      else if($camp_data['camp_type'] == 'Engagement') {
        $current_count = $data['engagement'];
      }
      else if($camp_data['camp_type'] == 'Click') {
        $current_count = $this->clickmeter_post($camp_data);
      }
    }
    else if($camp_data['camp_category'] == 'Twitter') {
      $data = $this->twitter_post($post_id, $inf_id);
      $cat = 'tw';
      if($camp_data['camp_type'] == 'Favorites') {
        $current_count = $data['favorites'];
      }
      else if($camp_data['camp_type'] == 'Retweets') {
        $current_count = $data['retweets'];
      }
      else if($camp_data['camp_type'] == 'Click') {
        $current_count = $this->clickmeter_post($camp_data);
      }
    }
    else if($camp_data['camp_category'] == 'Youtube') {
      $data = $this->youtube_post($post_id, $inf_id);
      $cat = 'yt';
      if($camp_data['camp_type'] == 'Likes') {
        $current_count = $data['likes'];
      }
      else if($camp_data['camp_type'] == 'Shares') {
        $current_count = $data['shares'];
      }
      else if($camp_data['camp_type'] == 'Views') {
        $current_count = $data['views'];
      }
      else if($camp_data['camp_type'] == 'Click') {
        $current_count = $this->clickmeter_post($camp_data);
      }
    }
    $insert_data = ['camp_id' => $camp_id, 'timestamp' => time(), 'data' => json_encode($data), 'camp_data_id' => $camp_data_id];

    if(date("Y-m-d")<date("Y-m-d",strtotime($camp_data['camp_completion_date']))) {
      $camp_required_count = $camp_data['number_of'];
      $percent = (float)$current_count*100.0/(float)$camp_required_count;
      if($percent>100) {
        $percent = 100;
      }
      else if($percent<0) {
        $percent = 0;
      }
      $this->db->where(['camp_id' => $camp_id, 'inf_id' => $inf_id]);
      $this->db->update('camp_data', ['percent_completion' => $percent]);
    }

    $table = 'webassets_'.$cat.'_analytics_'.$brand_id;
    $this->db->query('CREATE TABLE IF NOT EXISTS `'.$table.'` ( `id` INT NOT NULL AUTO_INCREMENT , `camp_id` INT NOT NULL, `camp_data_id` INT NOT NULL , `timestamp` BIGINT NOT NULL , `data` TEXT NOT NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;');
    if($this->db->insert($table, $insert_data)){
      print("OK");
    }
    else {
      print("NOT OK");
    }
  }

  public function clickmeter_report_datapoint($datapoint) {
    $url = 'http://apiv2.clickmeter.com:80/reports?type=browsers&timeframe=last180&datapoint='.$datapoint;
    $cm_api_key = CLICKMETER_API_KEY; // add your api key here
    //open connection
    $ch = curl_init();
    //set the url, number of POST vars, POST data
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('X-Clickmeter-Authkey: '.$cm_api_key, 'Content-Type: application/json' ));
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
    //execute post
    $result = curl_exec($ch);
    $error = curl_error($ch);
    curl_close($ch);
    return $result;
  }

  public function click_city_country($datapoint) {
    $url = 'http://apiv2.clickmeter.com/clickstream?datapoint='.$datapoint;
    $cm_api_key = CLICKMETER_API_KEY; // add your api key here

    $fields = array(
      "datapoint"=> $datapoint,
    );

    $fields_json = json_encode($fields);
    //open connection
    $ch = curl_init();
    //set the url, number of POST vars, POST data
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('X-Clickmeter-Authkey: '.$cm_api_key, 'Content-Type: application/json' ));
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, count($fields));
    curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_json);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
    //execute post
    $result = curl_exec($ch);
    //close connection
    $error = curl_error($ch);
    curl_close($ch);
    return json_decode($result,true);
  }
}
